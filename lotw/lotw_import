#!/usr/bin/python3

import adif
import json
import psycopg2
import psycopg2.extras

adif = adif.ADIF()
lotw = adif.read('lotwreport.adi')

conn = psycopg2.connect("service=cb")
cur = conn.cursor(cursor_factory = psycopg2.extras.DictCursor)

# {'CALL': 'YB1BML', 'BAND': '30m', 'FREQ': '10.13828', 'MODE': 'FT8', 'QSO_DATE': '20190302', 'TIME_ON': '161500', 'QSL_RCVD': 'Y', 'DXCC': '327', 'COUNTRY': 'INDONESIA', 'IOTA': 'OC-021', 'GRIDSQUARE': 'OI33KO', 'CQZ': '28', 'ITUZ': '54'}

for qso in lotw:
    print(qso)
    cur.execute("""INSERT INTO lotw (start, call, qrg, mode, country, loc, info)
            VALUES (%s, %s, %s, %s, %s, %s, %s)
            ON CONFLICT (start, call) DO UPDATE
            SET qrg = EXCLUDED.qrg,
                mode = EXCLUDED.mode,
                country = EXCLUDED.country,
                loc = EXCLUDED.loc,
                info = EXCLUDED.info""",
            ("%s %s" % (qso['QSO_DATE'], qso['TIME_ON']),
            qso.get('CALL'),
            qso.get('FREQ'),
            qso.get('MODE'),
            qso.get('COUNTRY'),
            qso.get('GRIDSQUARE'),
            json.dumps(qso)))

conn.commit()

# locator import
cur.execute("""UPDATE log l SET info = jsonb_set(coalesce(l.info, '{}'), '{lotw}', to_jsonb(true))
  FROM lotw w
  WHERE (date_trunc('minute', l.start), l.call) = (w.start, w.call)
    AND l.info->'lotw' IS NULL""")
print("New LoTW QSLs: %s" % cur.rowcount)

# locator import
cur.execute("""UPDATE log l SET loc = w.loc FROM lotw w
  WHERE (date_trunc('minute', l.start), l.call) = (w.start, w.call)
    AND l.loc IS NULL AND w.loc IS NOT NULL""")
print("New locators: %s" % cur.rowcount)

cur.execute("""UPDATE log l SET loc = w.loc FROM lotw w
  WHERE (date_trunc('minute', l.start), l.call) = (w.start, w.call)
    AND l.loc::varchar(4) = w.loc::varchar(4)
    AND l.loc <> w.loc""")
print("Updated locators: %s" % cur.rowcount)

# IOTA import:
cur.execute("""UPDATE log l SET info = jsonb_set(coalesce(l.info, '{}'), '{iota}', w.info->'IOTA') FROM lotw w
  WHERE (date_trunc('minute', l.start), l.call) = (w.start, w.call)
    AND l.info->'iota' IS DISTINCT FROM w.info->'IOTA'""")
print("Updated IOTAs: %s" % cur.rowcount)

# orphaned LoTW QSLs
cur.execute("""SELECT * FROM log l RIGHT JOIN lotw w ON (date_trunc('minute', l.start), l.call) = (w.start, w.call) WHERE l.start IS NULL""")
for row in cur.fetchall():
    print("Orphaned LoTW QSL:", row)

conn.commit()
